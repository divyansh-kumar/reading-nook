name: Deploy to ECS
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        run: |
          docker buildx create --use --name mybuilder
          docker buildx inspect mybuilder --bootstrap

      - name: Build, tag, and push backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: reading_back
          IMAGE_TAG: latest
        run: |
          cd inft3200-backend-main
          docker buildx build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --no-cache --push .

      - name: Build, tag, and push frontend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: reading_front
          IMAGE_TAG: latest
        run: |
          cd inft3200-frontend-main
          docker buildx build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --no-cache --push .

      - name: Check and create backend service if necessary
        run: |
          SERVICE_STATUS=$(aws ecs describe-services --cluster reading_cluster --services backend-service --query 'services[0].status' --output text 2>/dev/null || echo "MISSING")
          if [ "$SERVICE_STATUS" != "ACTIVE" ]; then
            echo "Creating backend-service..."
            aws ecs create-service --cluster reading_cluster \
              --service-name backend-service \
              --task-definition backend-task \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[subnet-0f79a8bc2b68a5059,subnet-02db8b81de0495592],securityGroups=[sg-0246d4745db4d12b4],assignPublicIp=ENABLED}" \
              --load-balancers "targetGroupArn=arn:aws:elasticloadbalancing:us-east-1:856297302853:targetgroup/backend-tg/56c1481471c3b073"
          else
            echo "backend-service is already active."
          fi

      - name: Check and create frontend service if necessary
        run: |
          SERVICE_STATUS=$(aws ecs describe-services --cluster reading_cluster --services frontend-service --query 'services[0].status' --output text 2>/dev/null || echo "MISSING")
          if [ "$SERVICE_STATUS" != "ACTIVE" ]; then
            echo "Creating frontend-service..."
            aws ecs create-service --cluster reading_cluster \
              --service-name frontend-service \
              --task-definition frontend-task \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[subnet-0f79a8bc2b68a5059,subnet-02db8b81de0495592],securityGroups=[sg-0246d4745db4d12b4],assignPublicIp=ENABLED}" \
              --load-balancers "targetGroupArn=arn:aws:elasticloadbalancing:us-east-1:856297302853:targetgroup/frontend-tg/9469bbe50b49f54c"
          else
            echo "frontend-service is already active."
          fi

      - name: Update ECS services
        run: |
          aws ecs update-service --cluster reading_cluster --service backend-service --force-new-deployment
          aws ecs update-service --cluster reading_cluster --service frontend-service --force-new-deployment